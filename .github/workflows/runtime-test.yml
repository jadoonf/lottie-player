name: Runtime Test Simulation

on:
  push:
    branches: [master]
  workflow_dispatch:
  pull_request:
    branches: [master]

jobs:
  runtime-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [14.x, 16.x]
        browser: ['chrome', 'firefox']

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup test environment
        run: |
          mkdir -p test-environment
          cd test-environment
          
          # Create a basic HTML file that uses the Lottie Player
          cat > index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Lottie Player Test</title>
            <script src="../dist/lottie-player.js"></script>
          </head>
          <body>
            <lottie-player
              src="https://assets2.lottiefiles.com/packages/lf20_qm8eqzse.json"
              background="transparent"
              speed="1"
              style="width: 300px; height: 300px;"
              loop
              autoplay
            >
            </lottie-player>
            
            <script>
              // Basic runtime test
              window.addEventListener('load', () => {
                const player = document.querySelector('lottie-player');
                console.log('Player loaded:', player !== null);
                console.log('Player version:', player.version);
                
                // Test basic API
                player.addEventListener('ready', () => {
                  console.log('Animation ready');
                  player.play();
                });
                
                player.addEventListener('error', (e) => {
                  console.error('Animation error:', e);
                });
              });
            </script>
          </body>
          </html>
          EOL

      - name: Install dependencies
        run: |
          npm install -g http-server
          yarn install --no-lockfile --ignore-optional --network-timeout 100000 --legacy-peer-deps

      - name: Build project
        run: |
          npm run build --legacy-peer-deps || true
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Install browser
        uses: browser-actions/setup-${{ matrix.browser }}@latest

      - name: Start test server
        run: |
          http-server . -p 8080 &
          sleep 5 # Give the server time to start

      - name: Run browser test
        run: |
          # Using puppeteer to run browser tests
          node << 'EOL'
          const puppeteer = require('puppeteer');

          async function runTest() {
            const browser = await puppeteer.launch({
              args: ['--no-sandbox'],
              headless: true
            });
            
            const page = await browser.newPage();
            
            // Collect console logs
            page.on('console', msg => console.log('Browser:', msg.text()));
            
            // Collect errors
            page.on('pageerror', err => console.error('Error:', err));
            
            try {
              await page.goto('http://localhost:8080/test-environment/index.html');
              
              // Wait for Lottie Player to be ready
              await page.waitForSelector('lottie-player');
              
              // Basic interaction test
              await page.evaluate(() => {
                const player = document.querySelector('lottie-player');
                player.pause();
                player.seek('50%');
                player.play();
              });
              
              // Wait for potential errors
              await page.waitForTimeout(2000);
              
            } catch (error) {
              console.error('Test failed:', error);
              process.exit(1);
            }
            
            await browser.close();
          }

          runTest();
          EOL

      - name: Cleanup
        run: |
          pkill -f http-server || true

      - name: Generate test report
        if: always()
        run: |
          echo "Runtime Test Report" > test-report.md
          echo "===================" >> test-report.md
          echo "Node version: ${{ matrix.node-version }}" >> test-report.md
          echo "Browser: ${{ matrix.browser }}" >> test-report.md
          echo "Test completed at: $(date)" >> test-report.md
